##import pandas as pd
##import numpy as np
##import subprocess
import re
##from multiprocessing import Pool
##import multiprocessing
##import string
##import random

def nuc_to_protein(nuc_string):
	table = { 
	        'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M', 
	        'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T', 
	        'AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K', 
	        'AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R',                  
	        'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L', 
	        'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P', 
	        'CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q', 
	        'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R', 
	        'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V', 
	        'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A', 
	        'GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E', 
	        'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G', 
	        'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S', 
	        'TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L', 
	        'TAC':'Y', 'TAT':'Y', 'TAA':'_', 'TAG':'_', 
	        'TGC':'C', 'TGT':'C', 'TGA':'_', 'TGG':'W', 
	    }

	protein ="" 
	while len(nuc_string)%3 != 0:                           #searches a string for three letters in a row and translates the DNA string to protien sequence
		nuc_string=nuc_string[:-1]
	for i in range(0, len(nuc_string), 3): 
		codon = nuc_string[i:i + 3] 
		protein+= table[codon] 
	return protein





##
##rhGAA_aa=open('GAA_coding.fa').readlines()[1:]             #reads in file from second line to end
##
##rhGAA_str=''.join([line.strip() for line in rhGAA_aa])              #concatenates all letters in file removing any spaces or new lines
##
##rhGAA_seq=nuc_to_protein(rhGAA_str)
##print(rhGAA_seq)
##print(rhGAA_seq[745])
##
##
##
##
##lumi_seq=open('Lumizyme_Sequence.fa').readlines()[1:]
##lumi_str=''.join([line.strip() for line in lumi_seq])
##print(lumi_str)
##print(lumi_str[745])





rhGAA_aa=open('GAA_coding.fa').readlines()[1:]             #reads in file from second line to end

rhGAA_str=''.join([line.strip() for line in rhGAA_aa])              #concatenates all letters in file removing any spaces or new lines

#print(rhGAA_str)
len_rhGAA_str=len(rhGAA_str)
print(len_rhGAA_str)

rhGAA_seq=nuc_to_protein(rhGAA_str)

#print(rhGAA_seq)
#print(rhGAA_seq[745])

position = 0
new_character = ''
del_end = 2859
del_amount = del_end - position

nGAA_aa = rhGAA_str[:position] + new_character + rhGAA_str[position+del_amount:]

len_nGAA_aa=len(nGAA_aa)
print(len_nGAA_aa)


##position2 = 1725
##new_character2 = 'A'
##del_end2 = 1726
##del_amount2 = del_end2 - position2
##
##nGAA_aa2 = nGAA_aa[:position2] + new_character2 + nGAA_aa[position2+del_amount2:]
##
##
##
##
##
##
##position3 = 2064
##new_character3 = 'A'
##del_end3 = 2065
##del_amount3 = del_end3 - position3
##
##nGAA_aa3 = nGAA_aa2[:position3] + new_character3 + nGAA_aa2[position3+del_amount3:]




print(nGAA_aa)

nGAA_seq=nuc_to_protein(nGAA_aa)                                 #translates the DNA sequence to the protein sequence using the fucntion above

#print(nGAA_seq)
#print(nGAA_seq[745])


len_rhGAA=len(rhGAA_seq)
print(len_rhGAA)

def turn_rhGAA_string_to_foreign_15mers(nGAA_seq,base_seq=rhGAA_seq):
	for_15mers=[]
	for i in range(len_rhGAA-14):
		startpos=nGAA_seq.find(rhGAA_seq[i:(i+15)])
		if startpos<0:
			#print(rhGAA_seq[i:(i+15)])
			for_15mers.append(rhGAA_seq[i:(i+15)])
	return for_15mers

for_aa=turn_rhGAA_string_to_foreign_15mers(nGAA_seq)

for_pep='\n'.join([line.strip() for line in for_aa])  

print(for_pep)


##temp = list(rhGAA_str)
##temp[position] = new_character
##string = "".join(temp)
##nGAA_seq2=nuc_to_protein(string)
##
##print(nGAA_seq2)
##print(nGAA_seq2[745])






##def replace_str_index(text,index=0,replacement=''):
##    return '%s%s%s'%(text[:index],replacement,text[index+1:])

##new_string = replace_str_index(old_string,middle)



##        
##def get_wted_aff1(x):
##
##	#These are the alleles in the proimmune study
##	allele_list=['DRB1_0701','DRB1_1501','DRB1_0407']
##	# function to generate a random string of n letters. This is unrelated to the 15-mer but is needed to create a random filename
##	# the random filenames were useful so that each worker could be working on a seperate file and so that it could be deleted
##	# for some reason, not all files are being deleted. maybe 2%
##
##	rand_str = lambda n: ''.join([random.choice('abcdefghijkl') for i in range(n)])
##	
##	# Now to generate a random string of length 10
##	s = rand_str(10)  
##	
##	# length of the peptide (usually 15)
##	pep_len=str(len(x))
##	
##	perc_rank=[]
##	
##	#create a temporary fasta for the peptide x
##	outfile=open('tmp/'+s+'.fasta','w')
##	outfile.write('>temp\n')
##	outfile.write(x)
##	outfile.close()
##	
##	# run netmhciipan 3.1 for the created file for each allele in the list
##	bash_command = 'for allele in ' + ' '.join(allele_list) + '; do netmhciipan -f ./tmp/'+ s+'.fasta -a $allele -length '+pep_len+'; done'
##	
##
##	process = subprocess.Popen(bash_command, shell=True, stdout=subprocess.PIPE)
##	
##	# terminal output of netmhc run as a list
##	line_list = str(process.communicate()[0]).split('\\n')
##	line_list=[i.strip() for i in line_list if i.strip().startswith('1')]
##	return(line_list)
##
##print(get_wted_aff1('AAAAAAAAAAAAAAAAAAA'))
##



'''


rhGAA_aa=open('../rhGAA_coding.fa').readlines()[1]
rhGAA_seq=nuc_to_protein(rhGAA_aa)

other_mutations=open('../Pompe_Patient_Data.csv').readlines()
other_mutations=[i for i in other_mutations if i.split(',')[3]=='rhGAA' and i.split(',')[4][2]!='*' and re.match('p\.([a-zA-Z]{3})([0-9]*)([a-zA-Z]*)',i.split(',')[5])]
lst=['\t'.join(j) for j in sorted([i.split(',') for i in other_mutations],key=lambda x: x[0])]

all_affinities=open('../data/affinities_15mers.csv').readlines()
all_affinities=[i.strip()[1:-1].split('","') for i in all_affinities]

def get_affinity(peptide,allele):
	print(peptide)
	print(allele)
	temp_affinities=[i for i in all_affinities if i[0]==peptide and i[2]==allele]
	print(temp_affinities)
	return(temp_affinities[0][4])


def add_non_clinical_mutaion(for_aa,pat_id):
	#print(pat_id)
	pat_mutation=[i for i in other_mutations if i.split(',')[0]==pat_id]
	#print(pat_mutation)
	temp_muts=[]
	for i in pat_mutation:
		#print(i)
		pattern=re.compile('^p.([a-zA-Z]*)([0-9]*)([a-zA-Z]*)')
		mtchs=re.search(pattern,i.split(',')[5])
		if mtchs is not None:

			rslts=mtchs.group(1,2,3)
			#print('%s\t%s  \t %s'%(rslts[0],rslts[1],rslts[2]))
			temp_muts+=[rhGAA_seq[(int(rslts[1])+x):(int(rslts[1])+15+x)] for x in range(-15,0,1)]
			#sprint(temp_muts)
	return for_aa+temp_muts
	
len_rhGAA=len(rhGAA_seq)




def turn_rhGAA_string_to_foreign_15mers(pat_rhGAAseq,base_seq=rhGAA_seq):
	for_15mers=[]
	for i in range(len_rhGAA-14):
		startpos=pat_rhGAAseq.find(rhGAA_seq[i:(i+15)])
		if startpos<0:
			#print(rhGAA_seq[i:(i+15)])
			for_15mers.append(rhGAA_seq[i:(i+15)])
	return for_15mers

def get_results_i22_inversion(input_mutation,description,pat_id):
	seq='KWQTYRGNSTGTLMVFFGNVDSSGIKHN'
	for_aa=[seq[i:i+15] for i in range(15)]
	#print(for_aa)
	or_aa=add_non_clinical_mutaion(for_aa,pat_id)
	#print(for_aa)
	return( [description,len(for_aa),for_aa,'placeholder for prom'] )


def get_results_i1_inversion(input_mutation,description,pat_id):
	seq='RFPPRVPKSFPFNTSVVYKKTLFVEFTDHLFNIAKPRPPWMGLLGPTIQAEVYDTVVITLKNMASHPVSLHAVGVSYWKASEGAEYDDQTSQREKEDDKVFPGGSHTYVWQVLKENGPMASDPLCLTYSYLSHVDLVKDLNSGLIGALLVCREGSLAKEKTQTLHKFILLFAVFDEGKSWHSETKNSLMQDRDAASARAWPKMHTVNGYVNRSLPGLIGCHRKSVYWHVIGMGTTPEVHSIFLEGHTFLVRNHRQASLEISPITFLTAQTLLMDLGQFLLFCHISSHQHDGMEAYVKVDSCPEEPQLRMKNNEEAEDYDDDLTDSEMDVVRFDDDNSPSFIQIRSVAKKHPKTWVHYIAAEEEDWDYAPLVLAPDDRSYKSQYLNNGPQRIGRKYKKVRFMAYTDETFKTREAIQHESGILGPLLYGEVGDTLLIIFKNQASRPYNIYPHGITDVRPLYSRRLPKGVKHLKDFPILPGEIFKYKWTVTVEDGPTKSDPRCLTRYYSSFVNMERDLASGLIGPLLICYKESVDQRGNQIMSDKRNVILFSVFDENRSWYLTENIQRFLPNPAGVQLEDPEFQASNIMHSINGYVFDSLQLSVCLHEVAYWYILSIGAQTDFLSVFFSGYTFKHKMVYEDTLTLFPFSGETVFMSMENPGLWILGCHNSDFRNRGMTALLKVSSCDKNTGDYYEDSYEDISAYLLSKNNAIEPRSFSQNSRHPSTRQKQFNATTIPENDIEKTDPWFAHRTPMPKIQNVSSSDLLMLLRQSPTPHGLSLSDLQEAKYETFSDDPSPGAIDSNNSLSEMTHFRPQLHHSGDMVFTPESGLQLRLNEKLGTTAATELKKLDFKVSSTSNNLISTIPSDNLAAGTDNTSSLGPPSMPVHYDSQLDTTLFGKKSSPLTESGGPLSLSEENNDSKLLESGLMNSQESSWGKNVSSTESGRLFKGKRAHGPALLTKDNALFKVSISLLKTNKTSNNSATNRKTHIDGPSLLIENSPSVWQNILESDTEFKKVTPLIHDRMLMDKNATALRLNHMSNKTTSSKNMEMVQQKKEGPIPPDAQNPDMSFFKMLFLPESARWIQRTHGKNSLNSGQGPSPKQLVSLGPEKSVEGQNFLSEKNKVVVGKGEFTKDVGLKEMVFPSSRNLFLTNLDNLHENNTHNQEKKIQEEIEKKETLIQENVVLPQIHTVTGTKNFMKNLFLLSTRQNVEGSYDGAYAPVLQDFRSLNDSTNRTKKHTAHFSKKGEEENLEGLGNQTKQIVEKYACTTRISPNTSQQNFVTQRSKRALKQFRLPLEETELEKRIIVDDTSTQWSKNMKHLTPSTLTQIDYNEKEKGAITQSPLSDCLTRSHSIPQANRSPLPIAKVSSFPSIRPIYLTRVLFQDNSSHLPAASYRKKDSGVQESSHFLQGAKKNNLSLAILTLEMTGDQREVGSLGTSATNSVTYKKVENTVLPKPDLPKTSGKVELLPKVHIYQKDLFPTETSNGSPGHLDLVEGSLLQGTEGAIKWNEANRPGKVPFLRVATESSAKTPSKLLDPLAWDNHYGTQIPKEEWKSQEKSPEKTAFKKKDTILSLNACESNHAIAAINEGQNKPEIEVTWAKQGRTERLCSQNPPVLKRHQREITRTTLQSDQEEIDYDDTISVEMKKEDFDIYDEDENQSPRSFQKKTRHYFIAAVERLWDYGMSSSPHVLRNRAQSGSVPQFKKVVFQEFTDGSFTQPLYRGELNEHLGLLGPYIRAEVEDNIMVTFRNQASRPYSFYSSLISYEEDQRQGAEPRKNFVKPNETKTYFWKVQHHMAPTKDEFDCKAWAYFSDVDLEKDVHSGLIGPLLVCHTNTLNPAHGRQVTVQEFALFFTIFDETKSWYFTENMERNCRAPCNIQMEDPTFKENYRFHAINGYIMDTLPGLVMAQDQRIRWYLLSMGSNENIHSIHFSGHVFTVRKKEEYKMALYNLYPGVFETVEMLPSKAGIWRVECLIGEHLHAGMSTLFLVYSNKCQTPLGMASGHIRDFQITASGQYGQWAPKLARLHYSGSINAWSTKEPFSWIKVDLLAPMIIHGIKTQGARQKFSSLYISQFIIMYSLDGKKWQTYRGNSTGTLMVFFGNVDSSGIKHNIFNPPIIARYIRLHPTHYSIRSTLRMELMGCDLNSCSMPLGMESKAISDAQITASSYFTNMFATWSPSKARLHLQGRSNAWRPQVNNPKEWLQVDFQKTMKVTGVTTQGVKSLLTSMYVKEFLISSSQDGHQWTLFFQNGKVKVFQGNQDSFTPVVNSLDPPLLTRYLRIHPQSWVHQIALRMEVLGCEAQDLY'
	for_aa=[seq[i:i+15] for i in range(15)]
	#print(for_aa)
	or_aa=add_non_clinical_mutaion(for_aa,pat_id)
	#print(for_aa)
	return( [description,len(for_aa),for_aa,'placeholder for prom'] )

def get_results_synonymous(pat_id,desc):
	for_aa=[]
	#print(for_aa)
	or_aa=add_non_clinical_mutaion(for_aa,pat_id)
	#print(for_aa)
	return( [desc,len(for_aa),for_aa,'placeholder for prom'] )
def get_results_frameshift_deletion(input_mutation,description,pat_id):
	pattern=re.compile('c\.[-]*([0-9]+)[-_\?\+]*([0-9]*)[-_\?\+]*del([ACGT]*)')
	match=re.search(pattern,input_mutation)
	re_results=match.group(1,2,3)
	if len(re_results[1])==0:
		new_seq=rhGAA_aa[:int(re_results[0])-1]+rhGAA_aa[int(re_results[0]):]
	else:
		new_seq=rhGAA_aa[:int(re_results[0])-1]+rhGAA_aa[int(re_results[1]):]
	while new_seq[:3]!='ATG':
		new_seq=new_seq[1:]
	#if new_seq[:3]!='ATG':
		#print(new_seq[:3])
	
	new_aa=nuc_to_protein(new_seq).split('_')[0]
	for_aa=turn_rhGAA_string_to_foreign_15mers(new_aa)
	for_aa=add_non_clinical_mutaion(for_aa,pat_id)
	
	return( [description,len(for_aa),for_aa,'placeholder for prom'] )

def get_results_frameshift_duplication(input_mutation,description,pat_id):
	pattern=re.compile('c\.([0-9]+)[_]*([0-9]*)dup([ACGT]*)')
	match=re.search(pattern,input_mutation)
	re_results=match.group(1,2,3)
	if len(re_results[2])==0:
		new_seq=rhGAA_aa[:(int(re_results[0])-1)] + rhGAA_aa[(int(re_results[0])-1):int(re_results[1])] +rhGAA_aa[(int(re_results[0])-1):]
	else:
		new_seq=rhGAA_aa[:int(re_results[0])] + re_results[2] +rhGAA_aa[int(re_results[0]):]
	new_aa=nuc_to_protein(new_seq).split('_')[0]
	for_aa=turn_rhGAA_string_to_foreign_15mers(new_aa)
	for_aa=add_non_clinical_mutaion(for_aa,pat_id)
	#print(for_aa)
	return( [description,len(for_aa),for_aa,'placeholder for prom'] )

def get_results_frameshift_insertion(input_mutation,description,pat_id):
	pattern=re.compile('c\.([0-9]+)[_]*([0-9]*)ins([ACGT]*)')
	match=re.search(pattern,input_mutation)
	re_results=match.group(1,2,3)
	if len(re_results[2])==1:
		new_seq=rhGAA_aa[:(int(re_results[0]))] + re_results[2] +rhGAA_aa[(int(re_results[0])):]
	else:
		new_seq=rhGAA_aa[:int(re_results[0])] + re_results[2] +rhGAA_aa[int(re_results[0]):]
	
	new_aa=nuc_to_protein(new_seq).split('_')[0]
	for_aa=turn_rhGAA_string_to_foreign_15mers(new_aa)
	for_aa=add_non_clinical_mutaion(for_aa,pat_id)
	#print(for_aa)
	return( [description,len(for_aa),for_aa,'placeholder for prom'] )


def get_results_missense(input_mutation,description,pat_id):
	pattern=re.compile('c\.([0-9]+)([ACGT])>([ACGT])')
	match=re.search(pattern,input_mutation)
	re_results=match.group(1,2,3)
	new_seq=rhGAA_aa[:(int(re_results[0])-1)] + re_results[2] +rhGAA_aa[(int(re_results[0])):]
	new_aa=nuc_to_protein(new_seq)
	for_aa=turn_rhGAA_string_to_foreign_15mers(new_aa)
	#print(for_aa)
	for_aa=add_non_clinical_mutaion(for_aa,pat_id)
	#print(for_aa)
	return( [description,len(for_aa),for_aa,'placeholder for prom'] )

def get_results_nonsense(input_mutation,description,pat_id):
	pattern=re.compile('c\.([0-9]+)([ACGT])>([ACGT])')
	match=re.search(pattern,input_mutation)
	re_results=match.group(1,2,3)
	#print(re_results[0])
	new_seq=rhGAA_aa[:int(re_results[0])]
	new_aa=nuc_to_protein(new_seq)
	for_aa=turn_rhGAA_string_to_foreign_15mers(new_aa)
	for_aa=add_non_clinical_mutaion(for_aa,pat_id)
	#print(for_aa)
	return( [description,len(for_aa),for_aa,'placeholder for prom'] )	

def get_results_frameshift_indel(input_mutation,description,pat_id):
	pattern=re.compile('c\.([0-9]+)[_]*([0-9]*)del[ACGT]*ins([ACGT]+)')
	match=re.search(pattern,input_mutation)
	re_results=match.group(1,2,3)
	
	if len(re_results[1])==0:
		new_seq=rhGAA_aa[:int(re_results[0])-1]+re_results[2]+rhGAA_aa[int(re_results[0]):]
	else:
		new_seq=rhGAA_aa[:int(re_results[0])-1]+re_results[2]+rhGAA_aa[int(re_results[1]):]
	new_aa=nuc_to_protein(new_seq).split('_')[0]
	for_aa=turn_rhGAA_string_to_foreign_15mers(new_aa)
	for_aa=add_non_clinical_mutaion(for_aa,pat_id)
	#print(for_aa)
	return( [description,len(for_aa),for_aa,'placeholder for prom'] )

def get_results_large_deletion(input_mutation,description,pat_id):
	#c.1-?_2113+?del
	#print(input_mutation)

	pattern=re.compile('c\.[-]*([0-9]+)[_]*[+-]*\?*_*[c.]*([0-9]+).+')
	match=re.search(pattern,input_mutation)
	re_results=match.group(1,2)
	new_seq=rhGAA_aa[:int(re_results[0])-1]+rhGAA_aa[int(re_results[1]):]
	new_aa=nuc_to_protein(new_seq).split('_')[0]
	#print(new_aa)
	for_aa=turn_rhGAA_string_to_foreign_15mers(new_aa)
	for_aa=add_non_clinical_mutaion(for_aa,pat_id)
	#print(for_aa)
	return( [description,len(for_aa),for_aa,'placeholder for prom'] )

def just_check_other_muts(pat_id):
	for_aa=add_non_clinical_mutaion([],pat_id)
	return( ['Ambiguous Clinical Mutations',len(for_aa),for_aa,'placeholder for prom'] )
#def get_affinities_foreign(mer_list):
	
#print turn_rhGAA_string_to_foreign_15mers(test_pat_rhGAA)

'''


